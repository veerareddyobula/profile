{"version":3,"sources":["components/label-section/label-section.js","containers/home/home-container.js","App.js","serviceWorker.js","index.js"],"names":["LabelSection","react_default","a","createElement","react","className","alt","src","style","zIndex","Component","HomeContainer","componentDidMount","$","document","ready","parallaxOneEntity","M","Parallax","init","elems","querySelectorAll","FloatingActionButton","direction","hoverEnabled","label_section_label_section","App","home_home_container","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"oVAoBeA,0LAdP,OACIC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBACXJ,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,qCAEJF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,OAAKG,IAAI,QAAQC,IAAI,0HAA0HC,MAAO,CAAEC,OAAQ,iBAVzJC,cCqCZC,oNAhCXC,kBAAoB,WAChBC,IAAEC,UAAUC,MAAM,WACd,IAAMC,EAAoBH,IAAE,aAC5BI,IAAEC,SAASC,KAAKH,KAGpB,IAAMI,EAAQN,SAASO,iBAAiB,qBACxCJ,IAAEK,qBAAqBH,KAAKC,EAAO,CAC/BG,UAAW,OACXC,cAAc,6EAKlB,OACIvB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACXJ,EAAAC,EAAAC,cAACsB,EAAD,MACAxB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,+CACXJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,8BACTJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBAAb,SAEJJ,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,UAAU,oBAAmBJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBAAb,kBACpCJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,UAAU,gCAA+BJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBAAb,kBAChDJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,UAAU,sBAAqBJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBAAb,aACtCJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,UAAU,qBAAoBJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBAAb,2BA3BjCK,cCSbgB,mLARX,OACEzB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwB,EAAD,cAJUjB,aCOEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASrB,SAASsB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcvB,MAAMwB,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e4cfbd62.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\r\nimport './label-section.css'\r\n\r\nclass LabelSection extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"section-container\">\r\n                    <h1>Veera Reddy.Obula</h1>\r\n                    <h3>Sr.FullStack Developer</h3>\r\n                </div>\r\n                <div className=\"parallax\">\r\n                    <img alt=\"Veera\" src='/assets/parallax/bicycle_wall_sports_120826_3840x2400.jpg?dpr=1&auto=format&fit=crop&w=800&h=800&q=80&cs=tinysrgb&crop=' style={{ zIndex: '-1' }} />\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LabelSection","import React, { Component } from 'react'\r\nimport $ from \"jquery\";\r\nimport M from \"materialize-css\";\r\n\r\nimport LabelSection from './../../components/label-section/label-section'\r\nimport './home-container.css'\r\nclass HomeContainer extends Component {\r\n\r\n    componentDidMount = () => {\r\n        $(document).ready(function () {\r\n            const parallaxOneEntity = $('.parallax');\r\n            M.Parallax.init(parallaxOneEntity);\r\n        });\r\n\r\n        const elems = document.querySelectorAll('.fixed-action-btn');\r\n        M.FloatingActionButton.init(elems, {\r\n            direction: 'left',\r\n            hoverEnabled: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"parallax-container\">\r\n                <LabelSection />\r\n                <div className=\"fixed-action-btn horizontal click-to-toggle\">\r\n                    <a className=\"btn-floating btn-large red\">\r\n                        <i className=\"material-icons\">menu</i>\r\n                    </a>\r\n                    <ul>\r\n                        <li><a className=\"btn-floating red\"><i className=\"material-icons\">insert_chart</i></a></li>\r\n                        <li><a className=\"btn-floating yellow darken-1\"><i className=\"material-icons\">format_quote</i></a></li>\r\n                        <li><a className=\"btn-floating green\"><i className=\"material-icons\">publish</i></a></li>\r\n                        <li><a className=\"btn-floating blue\"><i className=\"material-icons\">attach_file</i></a></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default HomeContainer\r\n","import React, { Component } from 'react';\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport './App.css';\nimport HomeContainer from './containers/home/home-container.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <HomeContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}